// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbchat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetChatsResponseT struct {
	Items []*ChatT `json:"items"`
}

func (t *GetChatsResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	itemsOffset := flatbuffers.UOffsetT(0)
	if t.Items != nil {
		itemsLength := len(t.Items)
		itemsOffsets := make([]flatbuffers.UOffsetT, itemsLength)
		for j := 0; j < itemsLength; j++ {
			itemsOffsets[j] = t.Items[j].Pack(builder)
		}
		GetChatsResponseStartItemsVector(builder, itemsLength)
		for j := itemsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(itemsOffsets[j])
		}
		itemsOffset = builder.EndVector(itemsLength)
	}
	GetChatsResponseStart(builder)
	GetChatsResponseAddItems(builder, itemsOffset)
	return GetChatsResponseEnd(builder)
}

func (rcv *GetChatsResponse) UnPackTo(t *GetChatsResponseT) {
	itemsLength := rcv.ItemsLength()
	t.Items = make([]*ChatT, itemsLength)
	for j := 0; j < itemsLength; j++ {
		x := Chat{}
		rcv.Items(&x, j)
		t.Items[j] = x.UnPack()
	}
}

func (rcv *GetChatsResponse) UnPack() *GetChatsResponseT {
	if rcv == nil {
		return nil
	}
	t := &GetChatsResponseT{}
	rcv.UnPackTo(t)
	return t
}

type GetChatsResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGetChatsResponse(buf []byte, offset flatbuffers.UOffsetT) *GetChatsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetChatsResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishGetChatsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGetChatsResponse(buf []byte, offset flatbuffers.UOffsetT) *GetChatsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GetChatsResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGetChatsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GetChatsResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetChatsResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GetChatsResponse) Items(obj *Chat, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GetChatsResponse) ItemsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func GetChatsResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func GetChatsResponseAddItems(builder *flatbuffers.Builder, items flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(items), 0)
}
func GetChatsResponseStartItemsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GetChatsResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
