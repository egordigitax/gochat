// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbchat

import (
	flatbuffers "github.com/google/flatbuffers/go"
	"strconv"
)

type RootMessagePayload byte

const (
	RootMessagePayloadNONE                        RootMessagePayload = 0
	RootMessagePayloadGetMessageFromClientRequest RootMessagePayload = 1
	RootMessagePayloadSendMessageToClientResponse RootMessagePayload = 2
	RootMessagePayloadGetChatsResponse            RootMessagePayload = 3
)

var EnumNamesRootMessagePayload = map[RootMessagePayload]string{
	RootMessagePayloadNONE:                        "NONE",
	RootMessagePayloadGetMessageFromClientRequest: "GetMessageFromClientRequest",
	RootMessagePayloadSendMessageToClientResponse: "SendMessageToClientResponse",
	RootMessagePayloadGetChatsResponse:            "GetChatsResponse",
}

var EnumValuesRootMessagePayload = map[string]RootMessagePayload{
	"NONE":                        RootMessagePayloadNONE,
	"GetMessageFromClientRequest": RootMessagePayloadGetMessageFromClientRequest,
	"SendMessageToClientResponse": RootMessagePayloadSendMessageToClientResponse,
	"GetChatsResponse":            RootMessagePayloadGetChatsResponse,
}

func (v RootMessagePayload) String() string {
	if s, ok := EnumNamesRootMessagePayload[v]; ok {
		return s
	}
	return "RootMessagePayload(" + strconv.FormatInt(int64(v), 10) + ")"
}

type RootMessagePayloadT struct {
	Type RootMessagePayload
	Value interface{}
}

func (t *RootMessagePayloadT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case RootMessagePayloadGetMessageFromClientRequest:
		return t.Value.(*GetMessageFromClientRequestT).Pack(builder)
	case RootMessagePayloadSendMessageToClientResponse:
		return t.Value.(*SendMessageToClientResponseT).Pack(builder)
	case RootMessagePayloadGetChatsResponse:
		return t.Value.(*GetChatsResponseT).Pack(builder)
	}
	return 0
}

func (rcv RootMessagePayload) UnPack(table flatbuffers.Table) *RootMessagePayloadT {
	switch rcv {
	case RootMessagePayloadGetMessageFromClientRequest:
		var x GetMessageFromClientRequest
		x.Init(table.Bytes, table.Pos)
		return &RootMessagePayloadT{Type: RootMessagePayloadGetMessageFromClientRequest, Value: x.UnPack()}
	case RootMessagePayloadSendMessageToClientResponse:
		var x SendMessageToClientResponse
		x.Init(table.Bytes, table.Pos)
		return &RootMessagePayloadT{Type: RootMessagePayloadSendMessageToClientResponse, Value: x.UnPack()}
	case RootMessagePayloadGetChatsResponse:
		var x GetChatsResponse
		x.Init(table.Bytes, table.Pos)
		return &RootMessagePayloadT{Type: RootMessagePayloadGetChatsResponse, Value: x.UnPack()}
	}
	return nil
}
