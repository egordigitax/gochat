// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbchat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetMessageFromClientRequestT struct {
	Text string `json:"text"`
}

func (t *GetMessageFromClientRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != "" {
		textOffset = builder.CreateString(t.Text)
	}
	GetMessageFromClientRequestStart(builder)
	GetMessageFromClientRequestAddText(builder, textOffset)
	return GetMessageFromClientRequestEnd(builder)
}

func (rcv *GetMessageFromClientRequest) UnPackTo(t *GetMessageFromClientRequestT) {
	t.Text = string(rcv.Text())
}

func (rcv *GetMessageFromClientRequest) UnPack() *GetMessageFromClientRequestT {
	if rcv == nil {
		return nil
	}
	t := &GetMessageFromClientRequestT{}
	rcv.UnPackTo(t)
	return t
}

type GetMessageFromClientRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsGetMessageFromClientRequest(buf []byte, offset flatbuffers.UOffsetT) *GetMessageFromClientRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetMessageFromClientRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGetMessageFromClientRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGetMessageFromClientRequest(buf []byte, offset flatbuffers.UOffsetT) *GetMessageFromClientRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GetMessageFromClientRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGetMessageFromClientRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GetMessageFromClientRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetMessageFromClientRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GetMessageFromClientRequest) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GetMessageFromClientRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func GetMessageFromClientRequestAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func GetMessageFromClientRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
