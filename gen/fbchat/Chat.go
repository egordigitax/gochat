// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbchat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ChatT struct {
	Title string `json:"title"`
	UnreadCount int32 `json:"unread_count"`
	LastMessage string `json:"last_message"`
	LastAuthor string `json:"last_author"`
	MediaUrl string `json:"media_url"`
}

func (t *ChatT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	titleOffset := flatbuffers.UOffsetT(0)
	if t.Title != "" {
		titleOffset = builder.CreateString(t.Title)
	}
	lastMessageOffset := flatbuffers.UOffsetT(0)
	if t.LastMessage != "" {
		lastMessageOffset = builder.CreateString(t.LastMessage)
	}
	lastAuthorOffset := flatbuffers.UOffsetT(0)
	if t.LastAuthor != "" {
		lastAuthorOffset = builder.CreateString(t.LastAuthor)
	}
	mediaUrlOffset := flatbuffers.UOffsetT(0)
	if t.MediaUrl != "" {
		mediaUrlOffset = builder.CreateString(t.MediaUrl)
	}
	ChatStart(builder)
	ChatAddTitle(builder, titleOffset)
	ChatAddUnreadCount(builder, t.UnreadCount)
	ChatAddLastMessage(builder, lastMessageOffset)
	ChatAddLastAuthor(builder, lastAuthorOffset)
	ChatAddMediaUrl(builder, mediaUrlOffset)
	return ChatEnd(builder)
}

func (rcv *Chat) UnPackTo(t *ChatT) {
	t.Title = string(rcv.Title())
	t.UnreadCount = rcv.UnreadCount()
	t.LastMessage = string(rcv.LastMessage())
	t.LastAuthor = string(rcv.LastAuthor())
	t.MediaUrl = string(rcv.MediaUrl())
}

func (rcv *Chat) UnPack() *ChatT {
	if rcv == nil {
		return nil
	}
	t := &ChatT{}
	rcv.UnPackTo(t)
	return t
}

type Chat struct {
	_tab flatbuffers.Table
}

func GetRootAsChat(buf []byte, offset flatbuffers.UOffsetT) *Chat {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Chat{}
	x.Init(buf, n+offset)
	return x
}

func FinishChatBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsChat(buf []byte, offset flatbuffers.UOffsetT) *Chat {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Chat{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedChatBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Chat) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Chat) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Chat) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chat) UnreadCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Chat) MutateUnreadCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Chat) LastMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chat) LastAuthor() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Chat) MediaUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ChatStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ChatAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(title), 0)
}
func ChatAddUnreadCount(builder *flatbuffers.Builder, unreadCount int32) {
	builder.PrependInt32Slot(1, unreadCount, 0)
}
func ChatAddLastMessage(builder *flatbuffers.Builder, lastMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(lastMessage), 0)
}
func ChatAddLastAuthor(builder *flatbuffers.Builder, lastAuthor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(lastAuthor), 0)
}
func ChatAddMediaUrl(builder *flatbuffers.Builder, mediaUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(mediaUrl), 0)
}
func ChatEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
