// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbchat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SendMessageToClientResponseT struct {
	Text string `json:"text"`
	AuthorId string `json:"author_id"`
	Nickname string `json:"nickname"`
	CreatedAt string `json:"created_at"`
}

func (t *SendMessageToClientResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != "" {
		textOffset = builder.CreateString(t.Text)
	}
	authorIdOffset := flatbuffers.UOffsetT(0)
	if t.AuthorId != "" {
		authorIdOffset = builder.CreateString(t.AuthorId)
	}
	nicknameOffset := flatbuffers.UOffsetT(0)
	if t.Nickname != "" {
		nicknameOffset = builder.CreateString(t.Nickname)
	}
	createdAtOffset := flatbuffers.UOffsetT(0)
	if t.CreatedAt != "" {
		createdAtOffset = builder.CreateString(t.CreatedAt)
	}
	SendMessageToClientResponseStart(builder)
	SendMessageToClientResponseAddText(builder, textOffset)
	SendMessageToClientResponseAddAuthorId(builder, authorIdOffset)
	SendMessageToClientResponseAddNickname(builder, nicknameOffset)
	SendMessageToClientResponseAddCreatedAt(builder, createdAtOffset)
	return SendMessageToClientResponseEnd(builder)
}

func (rcv *SendMessageToClientResponse) UnPackTo(t *SendMessageToClientResponseT) {
	t.Text = string(rcv.Text())
	t.AuthorId = string(rcv.AuthorId())
	t.Nickname = string(rcv.Nickname())
	t.CreatedAt = string(rcv.CreatedAt())
}

func (rcv *SendMessageToClientResponse) UnPack() *SendMessageToClientResponseT {
	if rcv == nil {
		return nil
	}
	t := &SendMessageToClientResponseT{}
	rcv.UnPackTo(t)
	return t
}

type SendMessageToClientResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSendMessageToClientResponse(buf []byte, offset flatbuffers.UOffsetT) *SendMessageToClientResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SendMessageToClientResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishSendMessageToClientResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSendMessageToClientResponse(buf []byte, offset flatbuffers.UOffsetT) *SendMessageToClientResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SendMessageToClientResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSendMessageToClientResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SendMessageToClientResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SendMessageToClientResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SendMessageToClientResponse) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SendMessageToClientResponse) AuthorId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SendMessageToClientResponse) Nickname() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SendMessageToClientResponse) CreatedAt() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SendMessageToClientResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SendMessageToClientResponseAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(text), 0)
}
func SendMessageToClientResponseAddAuthorId(builder *flatbuffers.Builder, authorId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(authorId), 0)
}
func SendMessageToClientResponseAddNickname(builder *flatbuffers.Builder, nickname flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nickname), 0)
}
func SendMessageToClientResponseAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(createdAt), 0)
}
func SendMessageToClientResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
