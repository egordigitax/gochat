// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbchat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RootMessageT struct {
	ActionType ActionType `json:"action_type"`
	Payload []byte `json:"payload"`
}

func (t *RootMessageT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	payloadOffset := flatbuffers.UOffsetT(0)
	if t.Payload != nil {
		payloadOffset = builder.CreateByteString(t.Payload)
	}
	RootMessageStart(builder)
	RootMessageAddActionType(builder, t.ActionType)
	RootMessageAddPayload(builder, payloadOffset)
	return RootMessageEnd(builder)
}

func (rcv *RootMessage) UnPackTo(t *RootMessageT) {
	t.ActionType = rcv.ActionType()
	t.Payload = rcv.PayloadBytes()
}

func (rcv *RootMessage) UnPack() *RootMessageT {
	if rcv == nil {
		return nil
	}
	t := &RootMessageT{}
	rcv.UnPackTo(t)
	return t
}

type RootMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsRootMessage(buf []byte, offset flatbuffers.UOffsetT) *RootMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RootMessage{}
	x.Init(buf, n+offset)
	return x
}

func FinishRootMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsRootMessage(buf []byte, offset flatbuffers.UOffsetT) *RootMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RootMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedRootMessageBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *RootMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RootMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RootMessage) ActionType() ActionType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ActionType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *RootMessage) MutateActionType(n ActionType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *RootMessage) Payload(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RootMessage) PayloadLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RootMessage) PayloadBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RootMessage) MutatePayload(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func RootMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RootMessageAddActionType(builder *flatbuffers.Builder, actionType ActionType) {
	builder.PrependByteSlot(0, byte(actionType), 0)
}
func RootMessageAddPayload(builder *flatbuffers.Builder, payload flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(payload), 0)
}
func RootMessageStartPayloadVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RootMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
