# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbchat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SendMessageToClientResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SendMessageToClientResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSendMessageToClientResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SendMessageToClientResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SendMessageToClientResponse
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SendMessageToClientResponse
    def AuthorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SendMessageToClientResponse
    def Nickname(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SendMessageToClientResponse
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def SendMessageToClientResponseStart(builder):
    builder.StartObject(4)

def Start(builder):
    SendMessageToClientResponseStart(builder)

def SendMessageToClientResponseAddText(builder, text):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)

def AddText(builder, text):
    SendMessageToClientResponseAddText(builder, text)

def SendMessageToClientResponseAddAuthorId(builder, authorId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(authorId), 0)

def AddAuthorId(builder, authorId):
    SendMessageToClientResponseAddAuthorId(builder, authorId)

def SendMessageToClientResponseAddNickname(builder, nickname):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(nickname), 0)

def AddNickname(builder, nickname):
    SendMessageToClientResponseAddNickname(builder, nickname)

def SendMessageToClientResponseAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    SendMessageToClientResponseAddCreatedAt(builder, createdAt)

def SendMessageToClientResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return SendMessageToClientResponseEnd(builder)


class SendMessageToClientResponseT(object):

    # SendMessageToClientResponseT
    def __init__(self):
        self.text = None  # type: str
        self.authorId = None  # type: str
        self.nickname = None  # type: str
        self.createdAt = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        sendMessageToClientResponse = SendMessageToClientResponse()
        sendMessageToClientResponse.Init(buf, pos)
        return cls.InitFromObj(sendMessageToClientResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, sendMessageToClientResponse):
        x = SendMessageToClientResponseT()
        x._UnPack(sendMessageToClientResponse)
        return x

    # SendMessageToClientResponseT
    def _UnPack(self, sendMessageToClientResponse):
        if sendMessageToClientResponse is None:
            return
        self.text = sendMessageToClientResponse.Text()
        self.authorId = sendMessageToClientResponse.AuthorId()
        self.nickname = sendMessageToClientResponse.Nickname()
        self.createdAt = sendMessageToClientResponse.CreatedAt()

    # SendMessageToClientResponseT
    def Pack(self, builder):
        if self.text is not None:
            text = builder.CreateString(self.text)
        if self.authorId is not None:
            authorId = builder.CreateString(self.authorId)
        if self.nickname is not None:
            nickname = builder.CreateString(self.nickname)
        if self.createdAt is not None:
            createdAt = builder.CreateString(self.createdAt)
        SendMessageToClientResponseStart(builder)
        if self.text is not None:
            SendMessageToClientResponseAddText(builder, text)
        if self.authorId is not None:
            SendMessageToClientResponseAddAuthorId(builder, authorId)
        if self.nickname is not None:
            SendMessageToClientResponseAddNickname(builder, nickname)
        if self.createdAt is not None:
            SendMessageToClientResponseAddCreatedAt(builder, createdAt)
        sendMessageToClientResponse = SendMessageToClientResponseEnd(builder)
        return sendMessageToClientResponse
