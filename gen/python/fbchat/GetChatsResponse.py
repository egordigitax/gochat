# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbchat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GetChatsResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetChatsResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetChatsResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetChatsResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GetChatsResponse
    def Items(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from fbchat.Chat import Chat
            obj = Chat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GetChatsResponse
    def ItemsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GetChatsResponse
    def ItemsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def GetChatsResponseStart(builder):
    builder.StartObject(1)

def Start(builder):
    GetChatsResponseStart(builder)

def GetChatsResponseAddItems(builder, items):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(items), 0)

def AddItems(builder, items):
    GetChatsResponseAddItems(builder, items)

def GetChatsResponseStartItemsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartItemsVector(builder, numElems):
    return GetChatsResponseStartItemsVector(builder, numElems)

def GetChatsResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return GetChatsResponseEnd(builder)

import fbchat.Chat
try:
    from typing import List
except:
    pass

class GetChatsResponseT(object):

    # GetChatsResponseT
    def __init__(self):
        self.items = None  # type: List[fbchat.Chat.ChatT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        getChatsResponse = GetChatsResponse()
        getChatsResponse.Init(buf, pos)
        return cls.InitFromObj(getChatsResponse)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, getChatsResponse):
        x = GetChatsResponseT()
        x._UnPack(getChatsResponse)
        return x

    # GetChatsResponseT
    def _UnPack(self, getChatsResponse):
        if getChatsResponse is None:
            return
        if not getChatsResponse.ItemsIsNone():
            self.items = []
            for i in range(getChatsResponse.ItemsLength()):
                if getChatsResponse.Items(i) is None:
                    self.items.append(None)
                else:
                    chat_ = fbchat.Chat.ChatT.InitFromObj(getChatsResponse.Items(i))
                    self.items.append(chat_)

    # GetChatsResponseT
    def Pack(self, builder):
        if self.items is not None:
            itemslist = []
            for i in range(len(self.items)):
                itemslist.append(self.items[i].Pack(builder))
            GetChatsResponseStartItemsVector(builder, len(self.items))
            for i in reversed(range(len(self.items))):
                builder.PrependUOffsetTRelative(itemslist[i])
            items = builder.EndVector()
        GetChatsResponseStart(builder)
        if self.items is not None:
            GetChatsResponseAddItems(builder, items)
        getChatsResponse = GetChatsResponseEnd(builder)
        return getChatsResponse
