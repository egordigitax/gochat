# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fbchat

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RootMessage(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RootMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRootMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # RootMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RootMessage
    def ActionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # RootMessage
    def Payload(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # RootMessage
    def PayloadAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # RootMessage
    def PayloadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RootMessage
    def PayloadIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def RootMessageStart(builder):
    builder.StartObject(2)

def Start(builder):
    RootMessageStart(builder)

def RootMessageAddActionType(builder, actionType):
    builder.PrependUint8Slot(0, actionType, 0)

def AddActionType(builder, actionType):
    RootMessageAddActionType(builder, actionType)

def RootMessageAddPayload(builder, payload):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)

def AddPayload(builder, payload):
    RootMessageAddPayload(builder, payload)

def RootMessageStartPayloadVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartPayloadVector(builder, numElems):
    return RootMessageStartPayloadVector(builder, numElems)

def RootMessageEnd(builder):
    return builder.EndObject()

def End(builder):
    return RootMessageEnd(builder)

try:
    from typing import List
except:
    pass

class RootMessageT(object):

    # RootMessageT
    def __init__(self):
        self.actionType = 0  # type: int
        self.payload = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        rootMessage = RootMessage()
        rootMessage.Init(buf, pos)
        return cls.InitFromObj(rootMessage)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, rootMessage):
        x = RootMessageT()
        x._UnPack(rootMessage)
        return x

    # RootMessageT
    def _UnPack(self, rootMessage):
        if rootMessage is None:
            return
        self.actionType = rootMessage.ActionType()
        if not rootMessage.PayloadIsNone():
            if np is None:
                self.payload = []
                for i in range(rootMessage.PayloadLength()):
                    self.payload.append(rootMessage.Payload(i))
            else:
                self.payload = rootMessage.PayloadAsNumpy()

    # RootMessageT
    def Pack(self, builder):
        if self.payload is not None:
            if np is not None and type(self.payload) is np.ndarray:
                payload = builder.CreateNumpyVector(self.payload)
            else:
                RootMessageStartPayloadVector(builder, len(self.payload))
                for i in reversed(range(len(self.payload))):
                    builder.PrependUint8(self.payload[i])
                payload = builder.EndVector()
        RootMessageStart(builder)
        RootMessageAddActionType(builder, self.actionType)
        if self.payload is not None:
            RootMessageAddPayload(builder, payload)
        rootMessage = RootMessageEnd(builder)
        return rootMessage
